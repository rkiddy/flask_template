
1) execute:

% virtualenv .venv
% source .venv/bin/activate
% pip install -r requirements.txt

2) change references to 'app' in app.py to desired application name.

3) create .env file containing:

FLASK_APP=app
FLASK_ENV=development
FLASK_DEBUG=1
FLASK_RUN_PORT=8080
APP_HOME=<directory_containing_app.py>
USR=<you>
HOST=localhost
PWD=<pwd>
DB=<dbName>
WWW=app/

I use the WWW variable because I want to test by connecting directly to the app, either on my
laptop or on my colo server, and I want to be able to run multiple apps via apache with the
same code and this is how I have worked it out.

When connecting directly, set to a prefix name. When one is connecting via apache, one uses that
same prefix to identify the app and the app code itself does not know about the prefix.

You have to make sure that when you have <a> tags in your html template files, they look like:

     <a href="/app/something-else">link text</a>

If you do not add the slash at the start of the href value, in other words if you use relative
links, then it will work fine when you connect directly. However, when you connect via apache, the
links will look like:

    https://example.com/app/app/something-else

This will not work.

4) Remember that when you want to run a flask app on a remote server and correct directyly, one
needs to launch the app thusly:

    % (.venv) % python3 -m flask run --host=0.0.0.0

This allows any host on the internet to contact the app. Do not, of course, leave this running
past a quick test.


D
4) Remeber that when you run a FLASK APP A



